// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package sqlc

import (
	"context"
)

const getAllDummy = `-- name: GetAllDummy :many
SELECT id, name, updated
FROM dummy
order by id
`

func (q *Queries) GetAllDummy(ctx context.Context) ([]Dummy, error) {
	rows, err := q.db.QueryContext(ctx, getAllDummy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dummy
	for rows.Next() {
		var i Dummy
		if err := rows.Scan(&i.ID, &i.Name, &i.Updated); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDummy = `-- name: InsertDummy :one
INSERT INTO dummy(name)
VALUES (?)
RETURNING id, name, updated
`

func (q *Queries) InsertDummy(ctx context.Context, name string) (Dummy, error) {
	row := q.db.QueryRowContext(ctx, insertDummy, name)
	var i Dummy
	err := row.Scan(&i.ID, &i.Name, &i.Updated)
	return i, err
}
